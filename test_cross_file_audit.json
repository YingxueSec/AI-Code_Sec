{
  "project_path": "examples/test_cross_file",
  "template": "owasp_top_10_2021",
  "total_files": 4,
  "findings": [
    {
      "file": "main.py",
      "language": "python",
      "type": "SQL注入漏洞",
      "severity": "high",
      "line": 13,
      "description": "在get_user函数中，用户输入的user_id直接传递给get_user_data函数，而该函数内部可能使用字符串拼接构造SQL查询，导致SQL注入风险。",
      "code_snippet": "user_data = get_user_data(user_id)",
      "impact": "攻击者可以通过构造恶意user_id参数执行任意SQL命令，可能导致数据泄露、篡改或删除。",
      "recommendation": "使用参数化查询或ORM框架来防止SQL注入。确保数据库查询函数不直接拼接用户输入。",
      "issues": [
        "在get_user函数中，用户输入的user_id直接传递给get_user_data函数，而该函数内部可能使用字符串拼接构造SQL查询，导致SQL注入风险。"
      ]
    },
    {
      "file": "main.py",
      "language": "python",
      "type": "权限验证绕过",
      "severity": "high",
      "line": 22,
      "description": "在admin_query函数中，虽然调用了validate_user函数进行权限验证，但validate_user函数本身存在缺陷，可能导致权限绕过。",
      "code_snippet": "if validate_user(user_id):",
      "impact": "攻击者可能绕过权限检查，执行管理员级别的查询操作，造成敏感数据泄露。",
      "recommendation": "审查validate_user函数的实现逻辑，确保其能正确验证用户权限。考虑引入更严格的权限控制机制。",
      "issues": [
        "在admin_query函数中，虽然调用了validate_user函数进行权限验证，但validate_user函数本身存在缺陷，可能导致权限绕过。"
      ]
    },
    {
      "file": "main.py",
      "language": "python",
      "type": "SQL注入漏洞",
      "severity": "high",
      "line": 27,
      "description": "在admin_query函数中，用户输入的query参数直接传递给execute_raw_query函数，该函数可能使用字符串拼接构造SQL查询，存在SQL注入风险。",
      "code_snippet": "result = execute_raw_query(query)",
      "impact": "攻击者可以构造恶意SQL语句执行任意数据库操作，包括数据读取、修改或删除。",
      "recommendation": "避免使用原始SQL查询，应使用参数化查询或ORM框架。如果必须使用原始查询，确保对输入进行严格验证和转义。",
      "issues": [
        "在admin_query函数中，用户输入的query参数直接传递给execute_raw_query函数，该函数可能使用字符串拼接构造SQL查询，存在SQL注入风险。"
      ]
    },
    {
      "file": "main.py",
      "language": "python",
      "type": "路径遍历漏洞",
      "severity": "high",
      "line": 37,
      "description": "在get_file函数中，用户输入的filename参数直接传递给read_user_file函数，该函数可能未对路径进行安全检查，导致路径遍历攻击。",
      "code_snippet": "content = read_user_file(filename)",
      "impact": "攻击者可通过构造恶意路径访问系统中任意文件，可能导致敏感信息泄露。",
      "recommendation": "对用户输入的文件名进行严格验证和清理，使用白名单机制限制可访问的文件路径。",
      "issues": [
        "在get_file函数中，用户输入的filename参数直接传递给read_user_file函数，该函数可能未对路径进行安全检查，导致路径遍历攻击。"
      ]
    },
    {
      "file": "main.py",
      "language": "python",
      "type": "命令注入漏洞",
      "severity": "high",
      "line": 50,
      "description": "在upload_file函数中，用户输入的文件名和文件内容传递给process_upload函数，该函数内部可能使用subprocess.run并启用shell=True，存在命令注入风险。",
      "code_snippet": "result = process_upload(file.filename, file.read())",
      "impact": "攻击者可通过构造恶意文件名执行任意系统命令，可能导致服务器被完全控制。",
      "recommendation": "避免在命令执行中使用用户输入，应使用安全的API替代shell=True选项。对文件名进行严格验证。",
      "issues": [
        "在upload_file函数中，用户输入的文件名和文件内容传递给process_upload函数，该函数内部可能使用subprocess.run并启用shell=True，存在命令注入风险。"
      ]
    },
    {
      "file": "main.py",
      "language": "python",
      "type": "硬编码敏感信息",
      "severity": "medium",
      "line": 1,
      "description": "代码文件开头包含硬编码的shebang路径，虽然不是敏感信息，但在某些场景下可能暴露系统环境信息。",
      "code_snippet": "#!/usr/bin/env python3",
      "impact": "虽然不是直接的安全威胁，但可能暴露系统配置信息。",
      "recommendation": "保持该行不变，但应确保部署环境的安全性。",
      "issues": [
        "代码文件开头包含硬编码的shebang路径，虽然不是敏感信息，但在某些场景下可能暴露系统环境信息。"
      ]
    },
    {
      "file": "utils/auth.py",
      "language": "python",
      "type": "权限验证绕过",
      "severity": "high",
      "line": 14,
      "description": "validate_user函数中使用硬编码的管理员列表进行权限验证，攻击者可以通过构造特定的用户ID绕过验证逻辑。",
      "code_snippet": "if str(user_id) in ADMIN_USERS:",
      "impact": "攻击者可以使用任意存在于ADMIN_USERS中的用户ID获取管理员权限。",
      "recommendation": "应使用强身份验证机制，如基于密码、令牌或证书的认证，而不是简单的字符串匹配。",
      "issues": [
        "validate_user函数中使用硬编码的管理员列表进行权限验证，攻击者可以通过构造特定的用户ID绕过验证逻辑。"
      ]
    },
    {
      "file": "utils/auth.py",
      "language": "python",
      "type": "时序攻击漏洞",
      "severity": "high",
      "line": 20,
      "description": "validate_user函数中通过响应时间来判断用户是否存在，容易受到时序攻击。",
      "code_snippet": "if len(str(user_id)) > 10:\n        time.sleep(0.1)",
      "impact": "攻击者可以通过测量响应时间推断用户是否存在，从而进行用户枚举攻击。",
      "recommendation": "应使用恒定时间比较函数，避免因响应时间差异暴露信息。",
      "issues": [
        "validate_user函数中通过响应时间来判断用户是否存在，容易受到时序攻击。"
      ]
    },
    {
      "file": "utils/auth.py",
      "language": "python",
      "type": "权限验证绕过",
      "severity": "high",
      "line": 34,
      "description": "get_user_permissions函数中基于用户ID前缀判断权限，存在权限提升漏洞。",
      "code_snippet": "if user_id_str.startswith('admin'):",
      "impact": "任何以'admin'开头的用户ID都会被赋予管理员权限，攻击者可构造此类ID绕过权限控制。",
      "recommendation": "应使用严格的权限模型，如RBAC（基于角色的访问控制），并避免基于字符串前缀的权限判断。",
      "issues": [
        "get_user_permissions函数中基于用户ID前缀判断权限，存在权限提升漏洞。"
      ]
    },
    {
      "file": "utils/auth.py",
      "language": "python",
      "type": "权限验证绕过",
      "severity": "high",
      "line": 41,
      "description": "get_user_permissions函数中对特权用户的判断过于宽松，任何以'1'开头的用户ID都会被赋予特权权限。",
      "code_snippet": "if user_id_str.startswith('1'): ",
      "impact": "攻击者可构造以'1'开头的用户ID绕过普通用户权限限制，获取更高权限。",
      "recommendation": "应使用严格的用户角色和权限映射，而不是基于字符串前缀的简单判断。",
      "issues": [
        "get_user_permissions函数中对特权用户的判断过于宽松，任何以'1'开头的用户ID都会被赋予特权权限。"
      ]
    },
    {
      "file": "utils/auth.py",
      "language": "python",
      "type": "权限验证绕过",
      "severity": "high",
      "line": 52,
      "description": "check_admin_access函数中通过字符串包含检查和数字范围判断来验证管理员权限，存在绕过风险。",
      "code_snippet": "if 'admin' in user_id_str.lower():",
      "impact": "攻击者可通过构造包含'admin'的用户ID绕过管理员权限验证。",
      "recommendation": "应使用精确匹配和严格的权限验证逻辑，避免模糊的字符串匹配。",
      "issues": [
        "check_admin_access函数中通过字符串包含检查和数字范围判断来验证管理员权限，存在绕过风险。"
      ]
    },
    {
      "file": "utils/auth.py",
      "language": "python",
      "type": "弱随机数生成",
      "severity": "high",
      "line": 64,
      "description": "generate_session_token函数中使用random模块生成会话令牌，且种子基于时间，容易被预测。",
      "code_snippet": "random.seed(int(time.time()))",
      "impact": "攻击者可预测生成的令牌，从而伪造会话令牌进行身份欺骗。",
      "recommendation": "应使用cryptographically secure随机数生成器，如secrets模块。",
      "issues": [
        "generate_session_token函数中使用random模块生成会话令牌，且种子基于时间，容易被预测。"
      ]
    },
    {
      "file": "utils/auth.py",
      "language": "python",
      "type": "不安全的哈希算法",
      "severity": "high",
      "line": 67,
      "description": "generate_session_token函数中使用MD5算法生成令牌，MD5已被证明不安全。",
      "code_snippet": "hashlib.md5(f\"{user_id}:{token}\".encode()).hexdigest()",
      "impact": "MD5易受碰撞攻击，可能导致令牌被伪造或破解。",
      "recommendation": "应使用更安全的哈希算法，如SHA-256或更高版本。",
      "issues": [
        "generate_session_token函数中使用MD5算法生成令牌，MD5已被证明不安全。"
      ]
    },
    {
      "file": "utils/auth.py",
      "language": "python",
      "type": "时序攻击漏洞",
      "severity": "high",
      "line": 74,
      "description": "verify_session_token函数中使用逐字符比较并添加延迟，容易受到时序攻击。",
      "code_snippet": "for i in range(len(token)):\n        if token[i] != expected_token[i]:\n            return False\n        time.sleep(0.001)",
      "impact": "攻击者可通过测量比较过程中的时间差异推断出正确的令牌值。",
      "recommendation": "应使用恒定时间比较函数，如hashlib.compare_digest()，避免因时间差异暴露信息。",
      "issues": [
        "verify_session_token函数中使用逐字符比较并添加延迟，容易受到时序攻击。"
      ]
    },
    {
      "file": "utils/auth.py",
      "language": "python",
      "type": "硬编码敏感信息",
      "severity": "medium",
      "line": 8,
      "description": "ADMIN_USERS列表中硬编码了管理员用户ID，容易被逆向工程发现。",
      "code_snippet": "ADMIN_USERS = ['1', 'admin', '0']",
      "impact": "攻击者可利用这些硬编码的用户ID进行权限绕过或暴力破解。",
      "recommendation": "应将敏感信息存储在环境变量或配置文件中，并确保其访问权限受限。",
      "issues": [
        "ADMIN_USERS列表中硬编码了管理员用户ID，容易被逆向工程发现。"
      ]
    },
    {
      "file": "utils/file_handler.py",
      "language": "python",
      "type": "路径遍历漏洞",
      "severity": "high",
      "line": 12,
      "description": "在read_user_file函数中，直接将用户输入的filename拼接到基础路径后，未对文件名进行任何验证或过滤，攻击者可以使用路径遍历攻击访问系统敏感文件。",
      "code_snippet": "file_path = base_path + filename",
      "impact": "攻击者可能读取系统任意文件，如/etc/passwd、/etc/shadow等敏感文件。",
      "recommendation": "应使用白名单验证文件名，或使用os.path.abspath()和os.path.normpath()进行路径规范化和安全检查。",
      "issues": [
        "在read_user_file函数中，直接将用户输入的filename拼接到基础路径后，未对文件名进行任何验证或过滤，攻击者可以使用路径遍历攻击访问系统敏感文件。"
      ]
    },
    {
      "file": "utils/file_handler.py",
      "language": "python",
      "type": "命令注入漏洞",
      "severity": "high",
      "line": 26,
      "description": "在process_upload函数中，使用shell=True执行subprocess.run时，直接将用户输入的filename拼接到命令中，存在命令注入风险。",
      "code_snippet": "cmd = f\"file {upload_path} && echo 'File processed: {filename}'\"",
      "impact": "攻击者可以通过构造恶意文件名执行任意系统命令，如上传名为\"test.txt; rm -rf /\"的文件来删除系统文件。",
      "recommendation": "避免使用shell=True，改用列表形式传递命令参数，或对用户输入进行严格转义和验证。",
      "issues": [
        "在process_upload函数中，使用shell=True执行subprocess.run时，直接将用户输入的filename拼接到命令中，存在命令注入风险。"
      ]
    },
    {
      "file": "utils/file_handler.py",
      "language": "python",
      "type": "路径遍历漏洞",
      "severity": "high",
      "line": 37,
      "description": "在delete_user_file函数中，直接将用户输入的filename拼接到用户目录路径后，未进行路径验证，存在路径遍历漏洞。",
      "code_snippet": "file_path = user_dir + filename",
      "impact": "攻击者可能删除系统任意文件，如通过filename=\"../../../etc/passwd\"删除系统敏感文件。",
      "recommendation": "应使用白名单验证文件名，或使用os.path.abspath()和os.path.normpath()进行路径规范化和安全检查。",
      "issues": [
        "在delete_user_file函数中，直接将用户输入的filename拼接到用户目录路径后，未进行路径验证，存在路径遍历漏洞。"
      ]
    },
    {
      "file": "utils/file_handler.py",
      "language": "python",
      "type": "命令注入漏洞",
      "severity": "high",
      "line": 42,
      "description": "在delete_user_file函数中，使用shell=True执行subprocess.run时，直接将用户输入的file_path拼接到命令中，存在命令注入风险。",
      "code_snippet": "cmd = f\"rm -f {file_path}\"",
      "impact": "攻击者可以通过构造恶意路径执行任意系统命令，如删除系统关键文件。",
      "recommendation": "避免使用shell=True，改用列表形式传递命令参数，或对用户输入进行严格转义和验证。",
      "issues": [
        "在delete_user_file函数中，使用shell=True执行subprocess.run时，直接将用户输入的file_path拼接到命令中，存在命令注入风险。"
      ]
    },
    {
      "file": "utils/file_handler.py",
      "language": "python",
      "type": "命令注入漏洞",
      "severity": "high",
      "line": 51,
      "description": "在backup_user_data函数中，使用shell=True执行subprocess.run时，直接将用户输入的user_id和backup_name拼接到命令中，存在命令注入风险。",
      "code_snippet": "cmd = f\"tar -czf {backup_path} {user_dir}\"",
      "impact": "攻击者可以通过构造恶意输入执行任意系统命令，如备份系统关键文件。",
      "recommendation": "避免使用shell=True，改用列表形式传递命令参数，或对用户输入进行严格转义和验证。",
      "issues": [
        "在backup_user_data函数中，使用shell=True执行subprocess.run时，直接将用户输入的user_id和backup_name拼接到命令中，存在命令注入风险。"
      ]
    },
    {
      "file": "utils/file_handler.py",
      "language": "python",
      "type": "Zip Slip漏洞",
      "severity": "high",
      "line": 64,
      "description": "在extract_archive函数中，直接解压zip文件而不验证文件路径，攻击者可以构造恶意zip文件包含路径遍历攻击，导致任意文件被写入系统任意位置。",
      "code_snippet": "zip_ref.extractall(extract_to)",
      "impact": "攻击者可以将恶意文件写入系统任意目录，如覆盖系统文件或写入恶意脚本。",
      "recommendation": "在解压前应验证文件路径，确保解压路径在目标目录内，防止路径遍历攻击。",
      "issues": [
        "在extract_archive函数中，直接解压zip文件而不验证文件路径，攻击者可以构造恶意zip文件包含路径遍历攻击，导致任意文件被写入系统任意位置。"
      ]
    },
    {
      "file": "utils/file_handler.py",
      "language": "python",
      "type": "命令注入漏洞",
      "severity": "high",
      "line": 71,
      "description": "在get_file_info函数中，使用shell=True执行subprocess.run时，直接将用户输入的filename拼接到命令中，存在命令注入风险。",
      "code_snippet": "cmd = f\"file {filename} && ls -la {filename}\"",
      "impact": "攻击者可以通过构造恶意输入执行任意系统命令，如读取系统敏感文件。",
      "recommendation": "避免使用shell=True，改用列表形式传递命令参数，或对用户输入进行严格转义和验证。",
      "issues": [
        "在get_file_info函数中，使用shell=True执行subprocess.run时，直接将用户输入的filename拼接到命令中，存在命令注入风险。"
      ]
    },
    {
      "file": "utils/database.py",
      "language": "python",
      "type": "SQL注入漏洞",
      "severity": "high",
      "line": 12,
      "description": "在execute_raw_query函数中，直接将用户提供的查询字符串传递给cursor.execute()，未进行任何参数化处理，导致SQL注入风险。",
      "code_snippet": "cursor.execute(query)",
      "impact": "攻击者可以构造恶意SQL语句，执行任意数据库操作，包括数据泄露、篡改或删除。",
      "recommendation": "使用参数化查询或预编译语句来防止SQL注入。例如：cursor.execute(query, (param,))",
      "issues": [
        "在execute_raw_query函数中，直接将用户提供的查询字符串传递给cursor.execute()，未进行任何参数化处理，导致SQL注入风险。"
      ]
    },
    {
      "file": "utils/database.py",
      "language": "python",
      "type": "SQL注入漏洞",
      "severity": "high",
      "line": 22,
      "description": "在get_user_data函数中，通过字符串格式化拼接SQL查询语句，未对user_id参数进行转义或参数化处理，存在SQL注入风险。",
      "code_snippet": "sql = f\"SELECT * FROM users WHERE id = {user_id}\"",
      "impact": "攻击者可以通过构造恶意的user_id参数，执行任意SQL查询，可能导致敏感数据泄露。",
      "recommendation": "使用参数化查询，将user_id作为参数传递给execute()方法，而不是直接拼接字符串。",
      "issues": [
        "在get_user_data函数中，通过字符串格式化拼接SQL查询语句，未对user_id参数进行转义或参数化处理，存在SQL注入风险。"
      ]
    },
    {
      "file": "utils/database.py",
      "language": "python",
      "type": "SQL注入漏洞",
      "severity": "high",
      "line": 34,
      "description": "在search_users函数中，通过字符串格式化拼接SQL查询语句，未对search_term参数进行转义或参数化处理，存在SQL注入风险。",
      "code_snippet": "sql = f\"SELECT * FROM users WHERE name LIKE '%{search_term}%' OR email LIKE '%{search_term}%'\")",
      "impact": "攻击者可以通过构造恶意的search_term参数，执行任意SQL查询，可能导致敏感数据泄露。",
      "recommendation": "使用参数化查询，将search_term作为参数传递给execute()方法，而不是直接拼接字符串。",
      "issues": [
        "在search_users函数中，通过字符串格式化拼接SQL查询语句，未对search_term参数进行转义或参数化处理，存在SQL注入风险。"
      ]
    },
    {
      "file": "utils/database.py",
      "language": "python",
      "type": "SQL注入漏洞",
      "severity": "high",
      "line": 46,
      "description": "在update_user_status函数中，通过字符串格式化拼接SQL更新语句，未对status和user_id参数进行转义或参数化处理，存在SQL注入风险。",
      "code_snippet": "sql = f\"UPDATE users SET status = '{status}' WHERE id = {user_id}\"",
      "impact": "攻击者可以通过构造恶意的status或user_id参数，执行任意SQL更新操作，可能导致数据篡改或权限提升。",
      "recommendation": "使用参数化查询，将status和user_id作为参数传递给execute()方法，而不是直接拼接字符串。",
      "issues": [
        "在update_user_status函数中，通过字符串格式化拼接SQL更新语句，未对status和user_id参数进行转义或参数化处理，存在SQL注入风险。"
      ]
    }
  ],
  "summary": {
    "total_findings": 26,
    "files_analyzed": 4,
    "completion_status": "success"
  },
  "timestamp": "2025-08-19 23:38:42.957799"
}