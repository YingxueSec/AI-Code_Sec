# 安全审计规则配置
# 用于配置不同语言和框架的安全检查规则，避免误报

# 框架安全规则
frameworks:
  spring_data_jpa:
    name: "Spring Data JPA"
    safe_patterns:
      - "@Query.*\\?\\d+"  # ?1, ?2 占位符
      - "@Query.*:\\w+"    # :param 命名参数
      - "findBy\\w+Like\\(" # 命名查询方法
    rules: |
      **Spring Data JPA安全规则**:
      - @Query注解使用?1, ?2占位符 = 安全的参数化查询，不存在SQL注入
      - @Query注解使用:param命名参数 = 安全的参数化查询
      - findByXxxLike()等命名查询方法 = 框架自动生成，使用参数化查询，安全
      - 只有原生SQL字符串拼接才有注入风险
    detection_patterns:
      - "@Query"
      - "JpaRepository"
      - "CrudRepository"

  mybatis:
    name: "MyBatis"
    safe_patterns:
      - "#\\{[^}]+\\}"  # #{param} 安全参数
    dangerous_patterns:
      - "\\$\\{[^}]+\\}"  # ${param} 危险参数
    rules: |
      **MyBatis安全规则**:
      - #{param} = 安全，使用PreparedStatement参数绑定，防止SQL注入
      - ${param} = 危险，直接字符串替换，存在SQL注入风险
      - 只有${}语法才需要报告SQL注入问题
    detection_patterns:
      - "#{"
      - "${"
      - "mapper"

  spring_mvc:
    name: "Spring MVC"
    safe_patterns:
      - "@RequestParam"
      - "@Valid"
      - "@Validated"
    rules: |
      **Spring MVC安全规则**:
      - @RequestParam自动进行基本验证
      - @Valid/@Validated提供输入验证
      - @PathVariable需要注意路径遍历风险
      - Controller层负责权限验证和输入校验
    detection_patterns:
      - "@Controller"
      - "@RestController"

  spring_security:
    name: "Spring Security"
    safe_patterns:
      - "@PreAuthorize"
      - "@Secured"
      - "SecurityContext"
    rules: |
      **Spring Security规则**:
      - @PreAuthorize/@Secured提供方法级权限控制
      - SecurityContext.getAuthentication()获取当前用户
      - 已有安全注解的方法通常不存在权限问题
    detection_patterns:
      - "@PreAuthorize"
      - "@Secured"
      - "SecurityContext"

  django:
    name: "Django"
    safe_patterns:
      - "\\.objects\\."
      - "\\.filter\\("
      - "@login_required"
    rules: |
      **Django安全规则**:
      - ORM查询默认使用参数化查询，防止SQL注入
      - raw()方法和extra()方法可能存在注入风险
      - @login_required装饰器提供认证
      - CSRF中间件默认启用
    detection_patterns:
      - "from django"
      - "django.db"

  flask:
    name: "Flask"
    safe_patterns:
      - "@app.route"
      - "request.args.get"
    rules: |
      **Flask安全规则**:
      - 使用SQLAlchemy ORM时默认参数化查询
      - request.args.get()提供基本的参数获取
      - 需要手动实现CSRF保护
    detection_patterns:
      - "from flask"
      - "@app.route"

# 语言特定检查项
languages:
  java:
    checks:
      - "SQL注入漏洞 (原生SQL字符串拼接)"
      - "命令注入漏洞 (Runtime.exec, ProcessBuilder)"
      - "路径遍历漏洞 (File操作未验证路径)"
      - "反序列化漏洞 (ObjectInputStream)"
      - "XML外部实体注入 (XXE)"
      - "LDAP注入漏洞"
      - "硬编码密钥和敏感信息"
      - "弱加密算法 (DES, MD5)"
      - "不安全的随机数生成"
    
  python:
    checks:
      - "SQL注入漏洞 (字符串拼接构造SQL)"
      - "命令注入漏洞 (subprocess.run with shell=True)"
      - "路径遍历漏洞 (直接拼接文件路径)"
      - "反序列化漏洞 (pickle.loads)"
      - "代码注入漏洞 (eval, exec)"
      - "SSRF漏洞 (requests等网络请求)"
      - "弱随机数生成 (random模块)"
      - "硬编码密钥和敏感信息"
      - "不安全的哈希算法 (MD5, SHA1)"
    
  javascript:
    checks:
      - "XSS跨站脚本攻击"
      - "原型污染漏洞"
      - "代码注入 (eval, Function构造器)"
      - "路径遍历漏洞"
      - "不安全的正则表达式 (ReDoS)"
      - "CSRF跨站请求伪造"
      - "不安全的随机数生成"
      - "敏感信息泄露"
    
  php:
    checks:
      - "SQL注入漏洞"
      - "文件包含漏洞 (LFI/RFI)"
      - "代码注入 (eval, assert)"
      - "命令注入漏洞"
      - "反序列化漏洞"
      - "路径遍历漏洞"
      - "XSS跨站脚本攻击"
      - "CSRF跨站请求伪造"

# 架构层次规则
architecture_layers:
  controller:
    name: "控制器层"
    responsibilities:
      - "权限验证"
      - "输入校验"
      - "会话管理"
      - "请求路由"
    security_focus:
      - "认证和授权"
      - "输入验证"
      - "CSRF防护"
      - "会话安全"
    
  service:
    name: "服务层"
    responsibilities:
      - "业务逻辑"
      - "事务管理"
      - "数据验证"
    security_focus:
      - "业务逻辑漏洞"
      - "数据完整性"
      - "事务安全"
    
  dao:
    name: "数据访问层"
    responsibilities:
      - "数据查询"
      - "数据持久化"
    security_focus:
      - "SQL注入"
      - "数据访问控制"
    notes: "DAO层不应该负责权限验证，这是上层的职责"
    
  entity:
    name: "实体层"
    responsibilities:
      - "数据模型"
      - "数据验证"
    security_focus:
      - "数据验证"
      - "敏感信息保护"

# 误报过滤规则
false_positive_filters:
  confidence_threshold: 0.3  # 低于此置信度的问题将被过滤
  
  sql_injection:
    safe_patterns:
      - "@Query.*\\?\\d+"     # JPA 占位符
      - "@Query.*:\\w+"       # JPA 命名参数
      - "findBy\\w+Like\\("   # JPA 命名查询
      - "#\\{[^}]+\\}"        # MyBatis 安全参数
      - "\\.objects\\."       # Django ORM
    
  permission_bypass:
    dao_layer_indicators:
      - "dao/"
      - "repository/"
      - "mapper/"
      - "Dao.java"
      - "Repository.java"
      - "Mapper.java"
    dao_method_patterns:
      - "find"
      - "save"
      - "delete"
      - "update"
      - "query"
