version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: ai_audit_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root_password_change_this}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-ai_code_audit_prod}
      MYSQL_USER: ${MYSQL_USER:-ai_audit}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-change_this_password}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    networks:
      - ai_audit_network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: ai_audit_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-change_this_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ai_audit_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai_audit_backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=mysql+asyncio://${MYSQL_USER:-ai_audit}:${MYSQL_PASSWORD:-change_this_password}@mysql:3306/${MYSQL_DATABASE:-ai_code_audit_prod}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-change_this_redis_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-change_this_secret_key_minimum_32_characters}
      - AI_API_KEY=${AI_API_KEY:-your_ai_api_key_here}
      - ENVIRONMENT=production
      - DEBUG=false
    volumes:
      - uploads_data:/var/uploads
      - cache_data:/var/cache/ai_audit
      - logs_data:/var/log/ai_audit
      - ./backend/config/production.env:/app/.env
    ports:
      - "8000:8000"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai_audit_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端Web服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai_audit_frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - ai_audit_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理 (可选，用于HTTPS和负载均衡)
  nginx:
    image: nginx:alpine
    container_name: ai_audit_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - logs_data:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - ai_audit_network
    profiles:
      - with-nginx

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  cache_data:
    driver: local
  logs_data:
    driver: local

networks:
  ai_audit_network:
    driver: bridge
