{
  "project_path": "examples/logic_test",
  "template": "owasp_top_10_2021",
  "total_files": 1,
  "findings": [
    {
      "file": "business_logic.py",
      "language": "python",
      "type": "时序攻击漏洞",
      "severity": "high",
      "line": 37,
      "description": "在PIN验证函数中，通过逐字符比较并添加固定延迟，使得攻击者可以通过响应时间推断出正确的PIN码，存在明显的时序攻击风险。",
      "code_snippet": "for i, (a, b) in enumerate(zip(pin, correct_pin)):\n            if a != b:\n                self.failed_attempts += 1\n                if self.failed_attempts >= 3:\n                    self.is_locked = True\n                return False\n            time.sleep(0.01)  # 每个正确字符增加延迟",
      "impact": "攻击者可以利用时序差异暴力破解PIN码，绕过身份验证。",
      "recommendation": "使用恒定时间比较函数（如hashlib.timing_safe_compare）替代逐字符比较，并移除延迟逻辑。",
      "issues": [
        "在PIN验证函数中，通过逐字符比较并添加固定延迟，使得攻击者可以通过响应时间推断出正确的PIN码，存在明显的时序攻击风险。"
      ]
    },
    {
      "file": "business_logic.py",
      "language": "python",
      "type": "竞态条件漏洞",
      "severity": "high",
      "line": 15,
      "description": "在转账功能中，检查余额和实际扣款之间存在时间窗口，可能导致并发操作时出现余额不一致的问题。",
      "code_snippet": "if self.balance >= amount:\n            # 模拟网络延迟或数据库操作\n            time.sleep(0.1)  \n            # 在这个时间窗口内，余额可能被其他操作修改\n            self.balance -= amount",
      "impact": "可能导致资金被重复扣除或透支，引发财务风险。",
      "recommendation": "使用数据库事务或锁机制确保操作原子性，避免在检查和修改之间出现时间窗口。",
      "issues": [
        "在转账功能中，检查余额和实际扣款之间存在时间窗口，可能导致并发操作时出现余额不一致的问题。"
      ]
    },
    {
      "file": "business_logic.py",
      "language": "python",
      "type": "权限验证绕过",
      "severity": "high",
      "line": 82,
      "description": "在权限提升函数中，逻辑错误导致即使用户不是管理员也能通过特定条件提升权限，存在权限绕过风险。",
      "code_snippet": "if admin_code == \"admin123\" or session['role'] == \"admin\":\n            # 如果已经是admin，不需要验证admin_code\n            session['role'] = \"admin\"\n            return True",
      "impact": "攻击者可能绕过权限控制，获得管理员权限。",
      "recommendation": "确保权限提升逻辑严格检查用户是否已拥有相应权限，避免逻辑漏洞。",
      "issues": [
        "在权限提升函数中，逻辑错误导致即使用户不是管理员也能通过特定条件提升权限，存在权限绕过风险。"
      ]
    },
    {
      "file": "business_logic.py",
      "language": "python",
      "type": "权限验证绕过",
      "severity": "high",
      "line": 91,
      "description": "在权限提升函数中，新会话在创建后5分钟内自动获得特权角色，这可能导致未授权访问。",
      "code_snippet": "if time.time() - session['created_at'] < 300:  # 5分钟内\n            # 新会话有特殊权限？这是错误的逻辑\n            session['role'] = \"privileged\"\n            return True",
      "impact": "攻击者可能利用会话创建时间窗口获取特权角色，绕过正常权限控制。",
      "recommendation": "移除基于会话创建时间的特权逻辑，确保权限提升需要明确的验证步骤。",
      "issues": [
        "在权限提升函数中，新会话在创建后5分钟内自动获得特权角色，这可能导致未授权访问。"
      ]
    },
    {
      "file": "business_logic.py",
      "language": "python",
      "type": "整数溢出漏洞",
      "severity": "medium",
      "line": 50,
      "description": "在购物车添加商品时，未对数量进行合理范围检查，可能导致整数溢出或异常行为。",
      "code_snippet": "total_price = price * quantity  # 可能发生整数溢出",
      "impact": "可能导致系统异常或计算错误，影响业务逻辑。",
      "recommendation": "添加数量范围检查，并使用安全的数学运算方式防止溢出。",
      "issues": [
        "在购物车添加商品时，未对数量进行合理范围检查，可能导致整数溢出或异常行为。"
      ]
    },
    {
      "file": "business_logic.py",
      "language": "python",
      "type": "重复应用漏洞",
      "severity": "medium",
      "line": 59,
      "description": "折扣应用逻辑仅检查是否已应用折扣，但未防止重复应用，可能导致用户多次享受折扣。",
      "code_snippet": "if discount_code == \"SAVE20\":\n            if not self.discount_applied:  # 检查不够严格\n                for item in self.items:\n                    item['total'] *= 0.8  # 20% 折扣\n                self.discount_applied = True",
      "impact": "用户可能多次应用同一折扣，造成经济损失。",
      "recommendation": "在应用折扣前进行更严格的检查，确保每个折扣只能应用一次。",
      "issues": [
        "折扣应用逻辑仅检查是否已应用折扣，但未防止重复应用，可能导致用户多次享受折扣。"
      ]
    },
    {
      "file": "business_logic.py",
      "language": "python",
      "type": "浮点数精度问题",
      "severity": "medium",
      "line": 70,
      "description": "在计算总价时使用浮点数，可能导致精度丢失，影响最终金额的准确性。",
      "code_snippet": "total = 0.0  # 应该使用Decimal",
      "impact": "计算结果可能不准确，影响财务数据的正确性。",
      "recommendation": "使用Decimal类型进行金额计算，避免浮点数精度问题。",
      "issues": [
        "在计算总价时使用浮点数，可能导致精度丢失，影响最终金额的准确性。"
      ]
    },
    {
      "file": "business_logic.py",
      "language": "python",
      "type": "会话固定漏洞",
      "severity": "medium",
      "line": 100,
      "description": "会话ID生成使用MD5哈希，且基于用户ID和时间戳，容易被预测，存在会话固定风险。",
      "code_snippet": "session_id = hashlib.md5(f\"{user_id}_{int(time.time())}\".encode()).hexdigest()",
      "impact": "攻击者可能预测或伪造会话ID，劫持用户会话。",
      "recommendation": "使用强随机数生成器（如secrets模块）生成会话ID，并避免使用可预测的输入。",
      "issues": [
        "会话ID生成使用MD5哈希，且基于用户ID和时间戳，容易被预测，存在会话固定风险。"
      ]
    },
    {
      "file": "business_logic.py",
      "language": "python",
      "type": "重放攻击漏洞",
      "severity": "medium",
      "line": 123,
      "description": "支付处理中仅通过支付ID检查是否已处理，未使用时间戳或签名等机制防止重放攻击。",
      "code_snippet": "if payment_id in self.processed_payments:\n            return False, \"Payment already processed\"",
      "impact": "攻击者可能重复提交相同的支付请求，导致重复扣款。",
      "recommendation": "添加时间戳、签名或唯一令牌等机制，防止支付请求被重复处理。",
      "issues": [
        "支付处理中仅通过支付ID检查是否已处理，未使用时间戳或签名等机制防止重放攻击。"
      ]
    },
    {
      "file": "business_logic.py",
      "language": "python",
      "type": "侧信道攻击漏洞",
      "severity": "medium",
      "line": 136,
      "description": "信用卡验证函数通过响应时间差异泄露卡号有效性信息，存在侧信道攻击风险。",
      "code_snippet": "for prefix in valid_prefixes:\n            if card_number.startswith(prefix):\n                time.sleep(0.1)  # 有效前缀需要更多处理时间\n                return len(card_number) >= 13",
      "impact": "攻击者可通过响应时间推断卡号是否有效，进而进行暴力破解。",
      "recommendation": "使用恒定时间的验证逻辑，避免通过响应时间泄露信息。",
      "issues": [
        "信用卡验证函数通过响应时间差异泄露卡号有效性信息，存在侧信道攻击风险。"
      ]
    },
    {
      "file": "business_logic.py",
      "language": "python",
      "type": "逻辑绕过漏洞",
      "severity": "medium",
      "line": 146,
      "description": "密码重置函数中，如果提供了安全问题但没有答案，代码未进行拒绝处理，存在逻辑绕过风险。",
      "code_snippet": "if security_question and not answer:\n        # 如果提供了安全问题但没有答案，应该拒绝\n        pass  # 但这里没有返回False",
      "impact": "攻击者可能绕过安全问题验证，进行非法密码重置。",
      "recommendation": "在提供安全问题但无答案时，应明确拒绝操作，确保安全验证完整。",
      "issues": [
        "密码重置函数中，如果提供了安全问题但没有答案，代码未进行拒绝处理，存在逻辑绕过风险。"
      ]
    },
    {
      "file": "business_logic.py",
      "language": "python",
      "type": "逻辑绕过漏洞",
      "severity": "medium",
      "line": 152,
      "description": "密码重置函数中，邮箱验证过于简单，仅检查是否包含@符号，容易被伪造。",
      "code_snippet": "if \"@\" in email:  # 过于简单的邮箱验证",
      "impact": "攻击者可使用无效邮箱进行密码重置，影响账户安全。",
      "recommendation": "使用正则表达式或第三方库进行更严格的邮箱格式验证。",
      "issues": [
        "密码重置函数中，邮箱验证过于简单，仅检查是否包含@符号，容易被伪造。"
      ]
    },
    {
      "file": "business_logic.py",
      "language": "python",
      "type": "竞态条件漏洞",
      "severity": "medium",
      "line": 163,
      "description": "投票功能中，检查用户是否已投票和记录投票之间存在时间窗口，可能导致重复投票。",
      "code_snippet": "try:\n        with open(votes_file, 'r') as f:\n            voted_users = f.read().splitlines()\n            if str(user_id) in voted_users:\n                return False, \"Already voted\"\n    except FileNotFoundError:\n        voted_users = []\n    \n    # 时间窗口：在这里可能发生竞态条件\n    time.sleep(0.01)\n    \n    # 记录投票\n    with open(votes_file, 'a') as f:\n        f.write(f\"{user_id}\\n\")",
      "impact": "可能导致用户重复投票，影响投票结果的准确性。",
      "recommendation": "使用文件锁或数据库事务确保检查和写入操作的原子性。",
      "issues": [
        "投票功能中，检查用户是否已投票和记录投票之间存在时间窗口，可能导致重复投票。"
      ]
    }
  ],
  "summary": {
    "total_findings": 13,
    "files_analyzed": 1,
    "completion_status": "success"
  },
  "timestamp": "2025-08-20 00:28:19.713155"
}