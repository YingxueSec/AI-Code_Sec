[
  {
    "file": "PlanDao.java",
    "path": "examples/test_oa-system/src/main/java/cn/gson/oasys/model/dao/plandao/PlanDao.java",
    "description": "Spring Data JPA DAO - 之前误报SQL注入",
    "findings_count": 0,
    "findings": []
  },
  {
    "file": "Planservice.java",
    "path": "examples/test_oa-system/src/main/java/cn/gson/oasys/model/dao/plandao/Planservice.java",
    "description": "Service层 - 之前误报权限验证",
    "findings_count": 0,
    "findings": []
  },
  {
    "file": "address-mapper.xml",
    "path": "examples/test_oa-system/src/main/resources/mappers/address-mapper.xml",
    "description": "MyBatis映射 - 真实SQL注入漏洞",
    "findings_count": 3,
    "findings": [
      {
        "file": "examples/test_oa-system/src/main/resources/mappers/address-mapper.xml",
        "language": "xml",
        "type": "SQL注入",
        "severity": "high",
        "line": 19,
        "description": "在动态SQL条件中使用了${pinyin}占位符，该占位符会被MyBatis直接进行字符串拼接，未使用PreparedStatement参数绑定，攻击者可通过构造恶意pinyin参数实现SQL注入。",
        "code_snippet": "AND d.pinyin LIKE '${pinyin}%'",
        "impact": "攻击者可绕过查询条件、读取或修改数据库中的敏感信息，甚至执行任意SQL语句。",
        "recommendation": "将${pinyin}替换为#{pinyin}，并在Java代码中拼接百分号，如：pinyin + \"%\"，确保使用参数化查询。",
        "issues": [
          "在动态SQL条件中使用了${pinyin}占位符，该占位符会被MyBatis直接进行字符串拼接，未使用PreparedStatement参数绑定，攻击者可通过构造恶意pinyin参数实现SQL注入。"
        ],
        "confidence": 0.8805000000000001,
        "confidence_factors": {
          "framework_protection": 0.5,
          "architecture_appropriateness": 1.0,
          "code_complexity": 0.7200000000000001,
          "pattern_reliability": 1.5,
          "context_completeness": 0.9,
          "historical_accuracy": 0.575
        },
        "confidence_reasoning": [
          "框架mybatis对SQL注入提供50%保护，降低置信度",
          "代码片段过短(1行)，可能缺乏足够上下文",
          "代码复杂度较低，可能是简单的框架调用",
          "检测到危险模式: \\$\\{[^}]+\\}",
          "缺少调用链信息，无法完整分析数据流",
          "SQL注入历史误报率85%，调整置信度"
        ],
        "risk_level": "high"
      },
      {
        "file": "examples/test_oa-system/src/main/resources/mappers/address-mapper.xml",
        "language": "xml",
        "type": "SQL注入",
        "severity": "high",
        "line": 22,
        "description": "在动态SQL条件中使用了${outtype}占位符，该占位符会被MyBatis直接进行字符串拼接，未使用PreparedStatement参数绑定，攻击者可通过构造恶意outtype参数实现SQL注入。",
        "code_snippet": "AND u.catelog_name = '${outtype}'",
        "impact": "攻击者可绕过查询条件、读取或修改数据库中的敏感信息，甚至执行任意SQL语句。",
        "recommendation": "将${outtype}替换为#{outtype}，确保使用参数化查询。",
        "issues": [
          "在动态SQL条件中使用了${outtype}占位符，该占位符会被MyBatis直接进行字符串拼接，未使用PreparedStatement参数绑定，攻击者可通过构造恶意outtype参数实现SQL注入。"
        ],
        "confidence": 0.8805000000000001,
        "confidence_factors": {
          "framework_protection": 0.5,
          "architecture_appropriateness": 1.0,
          "code_complexity": 0.7200000000000001,
          "pattern_reliability": 1.5,
          "context_completeness": 0.9,
          "historical_accuracy": 0.575
        },
        "confidence_reasoning": [
          "框架mybatis对SQL注入提供50%保护，降低置信度",
          "代码片段过短(1行)，可能缺乏足够上下文",
          "代码复杂度较低，可能是简单的框架调用",
          "检测到危险模式: \\$\\{[^}]+\\}",
          "缺少调用链信息，无法完整分析数据流",
          "SQL注入历史误报率85%，调整置信度"
        ],
        "risk_level": "high"
      },
      {
        "file": "examples/test_oa-system/src/main/resources/mappers/address-mapper.xml",
        "language": "xml",
        "type": "SQL注入",
        "severity": "high",
        "line": 26,
        "description": "在动态SQL条件中使用了${baseKey}占位符，该占位符会被MyBatis直接进行字符串拼接，未使用PreparedStatement参数绑定，攻击者可通过构造恶意baseKey参数实现SQL注入。",
        "code_snippet": "(d.user_name LIKE '%${baseKey}%' OR d.phone_number LIKE '%${baseKey}%' OR d.companyname LIKE '%${baseKey}%' OR d.pinyin LIKE '${baseKey}%' OR u.catelog_name LIKE '%${baseKey}%')",
        "impact": "攻击者可绕过查询条件、读取或修改数据库中的敏感信息，甚至执行任意SQL语句。",
        "recommendation": "将${baseKey}替换为#{baseKey}，并在Java代码中拼接百分号，如：\"%\" + baseKey + \"%\"，确保使用参数化查询。",
        "issues": [
          "在动态SQL条件中使用了${baseKey}占位符，该占位符会被MyBatis直接进行字符串拼接，未使用PreparedStatement参数绑定，攻击者可通过构造恶意baseKey参数实现SQL注入。"
        ],
        "confidence": 0.8805000000000001,
        "confidence_factors": {
          "framework_protection": 0.5,
          "architecture_appropriateness": 1.0,
          "code_complexity": 0.7200000000000001,
          "pattern_reliability": 1.5,
          "context_completeness": 0.9,
          "historical_accuracy": 0.575
        },
        "confidence_reasoning": [
          "框架mybatis对SQL注入提供50%保护，降低置信度",
          "代码片段过短(1行)，可能缺乏足够上下文",
          "代码复杂度较低，可能是简单的框架调用",
          "检测到危险模式: \\$\\{[^}]+\\}",
          "缺少调用链信息，无法完整分析数据流",
          "SQL注入历史误报率85%，调整置信度"
        ],
        "risk_level": "high"
      }
    ]
  }
]